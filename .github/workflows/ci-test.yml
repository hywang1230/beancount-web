name: CI Tests

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # 前端测试和构建
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Lint check
        run: npm run lint

      - name: Build frontend
        run: npm run build
        env:
          NODE_OPTIONS: --max-old-space-size=2048

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 1

  # 后端测试
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8 (if available)
        run: |
          pip install flake8 || echo "flake8 not required"
          # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true

      - name: Test import
        run: |
          python -c "
          try:
              import fastapi
              import uvicorn
              import beancount
              print('✅ 所有核心依赖导入成功')
          except ImportError as e:
              print(f'❌ 导入失败: {e}')
              exit(1)
          "

  # 快速Docker构建测试（只构建amd64）
  docker-build-test:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: beancount-web:test

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container -p 8000:8000 beancount-web:test
          sleep 10
          
          # 等待服务启动
          for i in {1..30}; do
            if curl -f http://localhost:8000/health 2>/dev/null; then
              echo "✅ 服务启动成功"
              break
            fi
            echo "等待服务启动... ($i/30)"
            sleep 2
          done
          
          # 清理
          docker stop test-container || true

  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './backend'
          format: gcc
          severity: warning
          ignore_names: venv

      - name: Check file sizes
        run: |
          echo "检查大文件..."
          find . -type f -size +10M -not -path "./venv/*" -not -path "./.git/*" | while read file; do
            echo "⚠️  大文件: $file ($(du -h "$file" | cut -f1))"
          done || true

  # 安全检查
  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner for filesystem
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: 0

  # 汇总结果
  test-summary:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, docker-build-test, code-quality, security-check]
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## 🧪 CI测试汇总" >> $GITHUB_STEP_SUMMARY
          echo "| 检查项目 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 前端构建 | ${{ needs.frontend-test.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 后端测试 | ${{ needs.backend-test.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker构建 | ${{ needs.docker-build-test.result == 'success' && '✅ 通过' || needs.docker-build-test.result == 'skipped' && '⏭️ 跳过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 代码质量 | ${{ needs.code-quality.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 安全检查 | ${{ needs.security-check.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY 